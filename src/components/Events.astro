---
// EventbriteEvents.astro
interface Props {
  collectionId: string;
}

const { collectionId } = Astro.props;

interface Event {
  name: { text: string };
  description: { text: string };
  start: { local: string };
  end: { local: string };
  venue?: { name: string };
  url: string;
  logo?: { url: string };
  is_series: boolean;
  series_id?: string;
  series?: {
    end_date: string;
    start_date: string;
  };
}

const EVENTBRITE_API_TOKEN = import.meta.env.EVENTBRITE_API_TOKEN;

// Fetch events at build time
async function getEvents(collectionId: string) {
  try {
    if (!EVENTBRITE_API_TOKEN) {
      throw new Error('Eventbrite API token is not configured');
    }

    const response = await fetch(
      `https://www.eventbriteapi.com/v3/collections/${collectionId}/events/?expand=series,venue`,
      {
        headers: {
          'Authorization': `Bearer ${EVENTBRITE_API_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );

    if (!response.ok) {
      throw new Error('Failed to fetch events');
    }

    const data = await response.json();
    return data.events;
  } catch (error) {
    console.error('Error fetching events:', error);
    return [];
  }
}

function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-GB', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

function isPastEvent(event: Event): boolean {
  const now = new Date();
  
  // If it's a series, check if the series end date is in the future
  if (event.series?.end_date) {
    return new Date(event.series.end_date) < now;
  }
  
  // For non-series events, check the event end date
  return new Date(event.end.local) < now;
}

const events = await getEvents(collectionId);

// Sort events: future events first (newest to oldest), then past events (newest to oldest)
const sortedEvents = [...events].sort((a, b) => {
  const aIsPast = isPastEvent(a);
  const bIsPast = isPastEvent(b);
  
  if (aIsPast === bIsPast) {
    // If both are past or both are future, sort by date (newest first)
    return new Date(b.start.local).getTime() - new Date(a.start.local).getTime();
  }
  // Put future events first
  return aIsPast ? 1 : -1;
});

---

<div class="max-w-7xl mx-auto px-4">
  {sortedEvents.length === 0 ? (
    <p>No events found.</p>
  ) : (
    <div>
      {/* Future Events Section */}
      <h2 class="mt-8 mb-4 pb-2 text-2xl font-bold text-violet-100 border-b-2 border-amber-500">Upcoming Events</h2>
      {sortedEvents.filter(event => !isPastEvent(event)).length === 0 ? (
        <p class="text-violet-200">No upcoming events at the moment.</p>
      ) : (
        sortedEvents
          .filter(event => !isPastEvent(event))
          .map((event: Event) => (
            <div class="flex flex-col md:flex-row gap-4 p-4 mb-4 bg-white rounded-lg border border-gray-200">
              <img 
                src={event.logo?.url || '/placeholder-image.jpg'} 
                alt={event.name.text} 
                class="w-full md:w-48 h-48 object-cover rounded-md"
              />
              <div class="flex-1">
                <h2 class="text-xl font-semibold text-gray-900">{event.name.text}</h2>
                {event.series && (
                  <div class="my-2">
                    <span class="inline-block px-2 py-1 text-sm text-white bg-green-500 rounded">Recurring Event</span>
                    <p class="mt-2 text-sm text-gray-600">
                      Series runs from {formatDate(event.series.start_date)} to {formatDate(event.series.end_date)}
                    </p>
                  </div>
                )}
                <p class="my-4 text-gray-600">
                  {event.description.text.substring(0, 200)}...
                </p>
                <p class="text-gray-700">
                  <strong>Start:</strong> {formatDate(event.start.local)}
                </p>
                <p class="text-gray-700">
                  <strong>Venue:</strong> {event.venue?.name || 'TBA'}
                </p>
                <a 
                  href={event.url} 
                  class="inline-block px-4 py-2 mt-4 text-white bg-amber-500 hover:bg-amber-600 rounded transition-colors duration-200"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Get Ticket
                </a>
              </div>
            </div>
          ))
      )}

      {/* Past Events Section */}
      <h2 class="mt-12 mb-4 pb-2 text-2xl font-bold text-violet-100 border-b-2 border-gray-600">Past Events</h2>
      {sortedEvents
        .filter(event => isPastEvent(event))
        .map((event: Event) => (
          <div class="flex flex-col md:flex-row gap-4 p-4 mb-4 bg-gray-50 rounded-lg border border-gray-200 opacity-70">
            <img 
              src={event.logo?.url || '/placeholder-image.jpg'} 
              alt={event.name.text} 
              class="w-full md:w-48 h-48 object-cover rounded-md"
            />
            <div class="flex-1">
              <h2 class="text-xl font-semibold text-gray-900">{event.name.text}</h2>
              {event.series && (
                <div class="my-2">
                  <span class="inline-block px-2 py-1 text-sm text-white bg-gray-500 rounded">Series Ended</span>
                  <p class="mt-2 text-sm text-gray-600">
                    Series ran from {formatDate(event.series.start_date)} to {formatDate(event.series.end_date)}
                  </p>
                </div>
              )}
              <p class="my-4 text-gray-600">
                {event.description.text.substring(0, 200)}...
              </p>
              <p class="text-gray-700">
                <strong>Date:</strong> {formatDate(event.start.local)}
              </p>
              <p class="text-gray-700">
                <strong>Venue:</strong> {event.venue?.name || 'TBA'}
              </p>
              <span class="inline-block px-4 py-2 mt-4 text-sm text-white bg-gray-500 rounded">Event Completed</span>
            </div>
          </div>
        ))
      }
    </div>
  )}
</div>