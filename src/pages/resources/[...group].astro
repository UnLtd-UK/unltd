---
import slugify from "slugify";
import { resources } from "@data/resources.js";

import { calculateReadTime } from "@data/functions/read-time.js";
import { groups } from "@data/functions/groups.ts";

import Template from "@layouts/Template.astro";
import Container from "@components/Container.astro";
import HeaderSection from "@components/our-support/headerSection.astro";

const {
    name,
    slug,
    description,
    breadcrumbs,
    items,
    groups: groupStructure,
} = Astro.props;

export async function getStaticPaths() {
    const name = "Resources";
    const description =
        "Anim aute id magna aliqua ad ad non deserunt sunt. Qui irure qui lorem cupidatat commodo. Elit sunt amet fugiat veniam occaecat fugiat aliqua.";
    const slug = slugify(name, {
        lower: true,
        strict: true,
        locale: "en",
        trim: true,
    });

    const structure = groups(resources);

    const paths = [];

    paths.push({
        params: { group: undefined },
        props: {
            name: name,
            description: description,
            slug: slug,
            breadcrumbs: [
                {
                    name,
                    slug,
                    path: `/resources`,
                },
            ],
            groups: structure,
            items: resources,
        },
    });

    function generateGroupPaths(node, parentBreadcrumbs = []) {
        const currentBreadcrumbs = [
            ...parentBreadcrumbs,
            {
                name: node.name,
                slug: node.slug,
                path: `${parentBreadcrumbs.length > 0 ? parentBreadcrumbs[parentBreadcrumbs.length - 1].path : "/resources"}/${node.slug}`,
            },
        ];

        const groupResources = resources.filter((resource) => {
            if (resource.groups.includes(node.name)) {
                // If this is a top-level group and the resource has no sub_groups
                if (!resource.sub_groups || resource.sub_groups.length === 0) {
                    return true;
                }
            }

            // Check if this is a sub-group
            if (
                resource.sub_groups &&
                resource.sub_groups.includes(node.name)
            ) {
                // If this is a sub-group and the resource has no specific_groups
                if (
                    !resource.specific_groups ||
                    resource.specific_groups.length === 0
                ) {
                    return true;
                }
            }

            // Check if this is a specific group
            if (
                resource.specific_groups &&
                resource.specific_groups.includes(node.name)
            ) {
                return true;
            }

            return false;
        });

        paths.push({
            params: {
                group: currentBreadcrumbs
                    .slice(1)
                    .map((b) => b.slug)
                    .join("/"),
            },
            props: {
                name: node.name,
                description: description,
                slug: node.slug,
                breadcrumbs: currentBreadcrumbs,
                groups: node.children,
                items: groupResources,
            },
        });

        node.children.forEach((child) => {
            generateGroupPaths(child, currentBreadcrumbs);
        });
    }

    structure.forEach((group) => {
        generateGroupPaths(group, [
            {
                name,
                slug,
                path: `/resources`,
            },
        ]);
    });

    return paths;
}
---

<Template name={name} description={description} breadcrumbs={breadcrumbs}>
    <Container>
        <HeaderSection title={name} description={description} />
        {
            groupStructure && groupStructure.length > 0 && (
                <div class="mt-8">
                    <h2 class="text-xl text-violet-100 font-semibold mb-4">
                        Groups
                    </h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {groupStructure.map((group) => (
                            <a
                                href={group.path}
                                class="block p-6 bg-white rounded-lg shadow hover:shadow-md transition-shadow"
                            >
                                <h3 class="text-lg font-medium text-gray-900">
                                    {group.name}
                                </h3>
                                {group.children.length > 0 && (
                                    <p class="mt-2 text-sm text-gray-500">
                                        {group.children.length} subgroups
                                    </p>
                                )}
                            </a>
                        ))}
                    </div>
                </div>
            )
        }
        {
            Astro.params.group && items && (
                <div class="mx-auto max-w-7xl">
                    <div class="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-20 lg:mx-0 lg:max-w-none lg:grid-cols-3">
                        {items.map((item) => {
                            return (
                                <article class="flex flex-col items-start justify-between hover:bg-violet-900 p-4 rounded-xl">
                                    <div class="max-w-xl">
                                        <div class="group relative">
                                            <span class="text-xs text-violet-400">
                                                {`${calculateReadTime(item.body)} MINS`}
                                            </span>
                                            <h3 class="mt-3 text-lg/6 font-semibold text-violet-200 group-hover:text-violet-300">
                                                <a
                                                    href={`${breadcrumbs[breadcrumbs.length - 1].path}/${slugify(
                                                        item.name,
                                                        {
                                                            lower: true,
                                                            strict: true,
                                                            locale: "en",
                                                            trim: true,
                                                        },
                                                    )}`}
                                                >
                                                    <span class="absolute inset-0" />
                                                    {item.name}
                                                </a>
                                            </h3>
                                            <p class="mt-5 line-clamp-3 text-sm/6 text-violet-400">
                                                {item.description}
                                            </p>
                                        </div>
                                    </div>
                                </article>
                            );
                        })}
                    </div>
                </div>
            )
        }
    </Container>
</Template>
